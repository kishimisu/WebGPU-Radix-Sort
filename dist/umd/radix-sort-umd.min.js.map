{"version":3,"file":"radix-sort-umd.min.js","sources":["../../src/utils.js","../../src/PrefixSumKernel.js","../../src/shaders/optimizations/prefix_sum_no_bank_conflict.js","../../src/shaders/prefix_sum.js","../../src/shaders/radix_sort_reorder.js","../../src/shaders/check_sort.js","../../src/CheckSortKernel.js","../../src/RadixSortKernel.js","../../src/shaders/optimizations/radix_sort_local_shuffle.js","../../src/shaders/radix_sort.js"],"sourcesContent":["/**\r\n * Find the best dispatch size x and y dimensions to minimize unused workgroups\r\n * \r\n * @param {GPUDevice} device - The GPU device\r\n * @param {int} workgroup_count - Number of workgroups to dispatch\r\n * @returns \r\n */\r\nfunction find_optimal_dispatch_size(device, workgroup_count) {\r\n    const dispatchSize = { \r\n        x: workgroup_count, \r\n        y: 1\r\n    }\r\n\r\n    if (workgroup_count > device.limits.maxComputeWorkgroupsPerDimension) {\r\n        const x = Math.floor(Math.sqrt(workgroup_count))\r\n        const y = Math.ceil(workgroup_count / x)\r\n        \r\n        dispatchSize.x = x\r\n        dispatchSize.y = y\r\n    }\r\n\r\n    return dispatchSize\r\n}\r\n\r\nfunction create_buffer_from_data({device, label, data, usage = 0}) {\r\n    const dispatchSizes = device.createBuffer({\r\n        label: label,\r\n        usage: usage,\r\n        size: data.length * 4,\r\n        mappedAtCreation: true\r\n    })\r\n\r\n    const dispatchData = new Uint32Array(dispatchSizes.getMappedRange())\r\n    dispatchData.set(data)\r\n    dispatchSizes.unmap()\r\n\r\n    return dispatchSizes\r\n}\r\n\r\nexport {\r\n    find_optimal_dispatch_size,\r\n    create_buffer_from_data,\r\n}","import prefixSumSource from \"./shaders/prefix_sum\"\r\nimport prefixSumSource_NoBankConflict from \"./shaders/optimizations/prefix_sum_no_bank_conflict\"\r\nimport { find_optimal_dispatch_size } from \"./utils\"\r\n\r\nclass PrefixSumKernel {\r\n    /**\r\n     * Perform a parallel prefix sum on the given data buffer\r\n     * \r\n     * Based on \"Parallel Prefix Sum (Scan) with CUDA\"\r\n     * https://www.eecs.umich.edu/courses/eecs570/hw/parprefix.pdf\r\n     * \r\n     * @param {GPUDevice} device\r\n     * @param {GPUBuffer} data - Buffer containing the data to process\r\n     * @param {number} count - Max number of elements to process\r\n     * @param {object} workgroup_size - Workgroup size in x and y dimensions. (x * y) must be a power of two\r\n     * @param {boolean} avoid_bank_conflicts - Use the \"Avoid bank conflicts\" optimization from the original publication\r\n     */\r\n    constructor({\r\n        device,\r\n        data,\r\n        count,\r\n        workgroup_size = { x: 16, y: 16 },\r\n        avoid_bank_conflicts = false\r\n    }) {\r\n        this.device = device\r\n        this.workgroup_size = workgroup_size\r\n        this.threads_per_workgroup = workgroup_size.x * workgroup_size.y\r\n        this.items_per_workgroup = 2 * this.threads_per_workgroup // 2 items are processed per thread\r\n\r\n        if (Math.log2(this.threads_per_workgroup) % 1 !== 0) \r\n            throw new Error(`workgroup_size.x * workgroup_size.y must be a power of two. (current: ${this.threads_per_workgroup})`)\r\n\r\n        this.pipelines = []\r\n\r\n        this.shaderModule = this.device.createShaderModule({\r\n            label: 'prefix-sum',\r\n            code: avoid_bank_conflicts ? prefixSumSource_NoBankConflict : prefixSumSource,\r\n        })\r\n\r\n        this.create_pass_recursive(data, count)\r\n    }\r\n\r\n    create_pass_recursive(data, count) {\r\n        // Find best dispatch x and y dimensions to minimize unused threads\r\n        const workgroup_count = Math.ceil(count / this.items_per_workgroup)\r\n        const dispatchSize = find_optimal_dispatch_size(this.device, workgroup_count)\r\n        \r\n        // Create buffer for block sums        \r\n        const blockSumBuffer = this.device.createBuffer({\r\n            label: 'prefix-sum-block-sum',\r\n            size: workgroup_count * 4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\r\n        })\r\n\r\n        // Create bind group and pipeline layout\r\n        const bindGroupLayout = this.device.createBindGroupLayout({\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                }\r\n            ]\r\n        })\r\n\r\n        const bindGroup = this.device.createBindGroup({\r\n            label: 'prefix-sum-bind-group',\r\n            layout: bindGroupLayout,\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: { buffer: data }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: { buffer: blockSumBuffer }\r\n                }\r\n            ]\r\n        })\r\n\r\n        const pipelineLayout = this.device.createPipelineLayout({\r\n            bindGroupLayouts: [ bindGroupLayout ]\r\n        })\r\n\r\n        // Per-workgroup (block) prefix sum\r\n        const scanPipeline = this.device.createComputePipeline({\r\n            label: 'prefix-sum-scan-pipeline',\r\n            layout: pipelineLayout,\r\n            compute: {\r\n                module: this.shaderModule,\r\n                entryPoint: 'reduce_downsweep',\r\n                constants: {\r\n                    'WORKGROUP_SIZE_X': this.workgroup_size.x,\r\n                    'WORKGROUP_SIZE_Y': this.workgroup_size.y,\r\n                    'THREADS_PER_WORKGROUP': this.threads_per_workgroup,\r\n                    'ITEMS_PER_WORKGROUP': this.items_per_workgroup\r\n                }\r\n            }\r\n        })\r\n\r\n        this.pipelines.push({ pipeline: scanPipeline, bindGroup, dispatchSize })\r\n\r\n        if (workgroup_count > 1) {\r\n            // Prefix sum on block sums\r\n            this.create_pass_recursive(blockSumBuffer, workgroup_count)\r\n\r\n            // Add block sums to local prefix sums\r\n            const blockSumPipeline = this.device.createComputePipeline({\r\n                label: 'prefix-sum-add-block-pipeline',\r\n                layout: pipelineLayout,\r\n                compute: {\r\n                    module: this.shaderModule,\r\n                    entryPoint: 'add_block_sums',\r\n                    constants: {\r\n                        'WORKGROUP_SIZE_X': this.workgroup_size.x,\r\n                        'WORKGROUP_SIZE_Y': this.workgroup_size.y,\r\n                        'THREADS_PER_WORKGROUP': this.threads_per_workgroup\r\n                    }\r\n                }\r\n            })\r\n\r\n            this.pipelines.push({ pipeline: blockSumPipeline, bindGroup, dispatchSize })\r\n        }\r\n    }\r\n\r\n    get_dispatch_chain() {\r\n        return this.pipelines.flatMap(p => [ p.dispatchSize.x, p.dispatchSize.y, 1 ])\r\n    }\r\n\r\n    dispatch(pass, dispatchSize, offset = 0) {\r\n        for (let i = 0; i < this.pipelines.length; i++) {\r\n            const { pipeline, bindGroup } = this.pipelines[i]\r\n            \r\n            pass.setPipeline(pipeline)\r\n            pass.setBindGroup(0, bindGroup)\r\n            pass.dispatchWorkgroupsIndirect(dispatchSize, offset + i * 3 * 4)\r\n        }\r\n    }\r\n}\r\n\r\nexport default PrefixSumKernel","/**\r\n * Prefix sum with optimization to avoid bank conflicts\r\n * \r\n * (see Implementation section in README for details)\r\n */\r\nconst prefixSumNoBankConflictSource = /* wgsl */ `\r\n\r\n@group(0) @binding(0) var<storage, read_write> items: array<u32>;\r\n@group(0) @binding(1) var<storage, read_write> blockSums: array<u32>;\r\n\r\noverride WORKGROUP_SIZE_X: u32;\r\noverride WORKGROUP_SIZE_Y: u32;\r\noverride THREADS_PER_WORKGROUP: u32;\r\noverride ITEMS_PER_WORKGROUP: u32;\r\n\r\nconst NUM_BANKS: u32 = 32;\r\nconst LOG_NUM_BANKS: u32 = 5;\r\n\r\nfn get_offset(offset: u32) -> u32 {\r\n    // return offset >> LOG_NUM_BANKS; // Conflict-free\r\n    return (offset >> NUM_BANKS) + (offset >> (2 * LOG_NUM_BANKS)); // Zero bank conflict\r\n}\r\n\r\nvar<workgroup> temp: array<u32, ITEMS_PER_WORKGROUP*2>;\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn reduce_downsweep(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP;\r\n    let GID = WID + TID; // Global thread ID\r\n    \r\n    let ELM_TID = TID * 2; // Element pair local ID\r\n    let ELM_GID = GID * 2; // Element pair global ID\r\n    \r\n    // Load input to shared memory\r\n    let ai: u32 = TID;\r\n    let bi: u32 = TID + (ITEMS_PER_WORKGROUP >> 1);\r\n    let s_ai = ai + get_offset(ai);\r\n    let s_bi = bi + get_offset(bi);\r\n    let g_ai = ai + WID * 2;\r\n    let g_bi = bi + WID * 2;\r\n    temp[s_ai] = items[g_ai];\r\n    temp[s_bi] = items[g_bi];\r\n\r\n    var offset: u32 = 1;\r\n\r\n    // Up-sweep (reduce) phase\r\n    for (var d: u32 = ITEMS_PER_WORKGROUP >> 1; d > 0; d >>= 1) {\r\n        workgroupBarrier();\r\n\r\n        if (TID < d) {\r\n            var ai: u32 = offset * (ELM_TID + 1) - 1;\r\n            var bi: u32 = offset * (ELM_TID + 2) - 1;\r\n            ai += get_offset(ai);\r\n            bi += get_offset(bi);\r\n            temp[bi] += temp[ai];\r\n        }\r\n\r\n        offset *= 2;\r\n    }\r\n\r\n    // Save workgroup sum and clear last element\r\n    if (TID == 0) {\r\n        var last_offset = ITEMS_PER_WORKGROUP - 1;\r\n        last_offset += get_offset(last_offset);\r\n\r\n        blockSums[WORKGROUP_ID] = temp[last_offset];\r\n        temp[last_offset] = 0;\r\n    }\r\n\r\n    // Down-sweep phase\r\n    for (var d: u32 = 1; d < ITEMS_PER_WORKGROUP; d *= 2) {\r\n        offset >>= 1;\r\n        workgroupBarrier();\r\n\r\n        if (TID < d) {\r\n            var ai: u32 = offset * (ELM_TID + 1) - 1;\r\n            var bi: u32 = offset * (ELM_TID + 2) - 1;\r\n            ai += get_offset(ai);\r\n            bi += get_offset(bi);\r\n\r\n            let t: u32 = temp[ai];\r\n            temp[ai] = temp[bi];\r\n            temp[bi] += t;\r\n        }\r\n    }\r\n    workgroupBarrier();\r\n\r\n    // Copy result from shared memory to global memory\r\n    items[g_ai] = temp[s_ai];\r\n    items[g_bi] = temp[s_bi];\r\n}\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn add_block_sums(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP;\r\n    let GID = WID + TID; // Global thread ID\r\n\r\n    let ELM_ID = GID * 2;\r\n    let blockSum = blockSums[WORKGROUP_ID];\r\n\r\n    items[ELM_ID] += blockSum;\r\n    items[ELM_ID + 1] += blockSum;\r\n}`\r\n\r\nexport default prefixSumNoBankConflictSource","const prefixSumSource = /* wgsl */ `\r\n\r\n@group(0) @binding(0) var<storage, read_write> items: array<u32>;\r\n@group(0) @binding(1) var<storage, read_write> blockSums: array<u32>;\r\n\r\noverride WORKGROUP_SIZE_X: u32;\r\noverride WORKGROUP_SIZE_Y: u32;\r\noverride THREADS_PER_WORKGROUP: u32;\r\noverride ITEMS_PER_WORKGROUP: u32;\r\n\r\nvar<workgroup> temp: array<u32, ITEMS_PER_WORKGROUP*2>;\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn reduce_downsweep(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP;\r\n    let GID = WID + TID; // Global thread ID\r\n    \r\n    let ELM_TID = TID * 2; // Element pair local ID\r\n    let ELM_GID = GID * 2; // Element pair global ID\r\n    \r\n    // Load input to shared memory\r\n    temp[ELM_TID]     = items[ELM_GID];\r\n    temp[ELM_TID + 1] = items[ELM_GID + 1];\r\n\r\n    var offset: u32 = 1;\r\n\r\n    // Up-sweep (reduce) phase\r\n    for (var d: u32 = ITEMS_PER_WORKGROUP >> 1; d > 0; d >>= 1) {\r\n        workgroupBarrier();\r\n\r\n        if (TID < d) {\r\n            var ai: u32 = offset * (ELM_TID + 1) - 1;\r\n            var bi: u32 = offset * (ELM_TID + 2) - 1;\r\n            temp[bi] += temp[ai];\r\n        }\r\n\r\n        offset *= 2;\r\n    }\r\n\r\n    // Save workgroup sum and clear last element\r\n    if (TID == 0) {\r\n        let last_offset = ITEMS_PER_WORKGROUP - 1;\r\n\r\n        blockSums[WORKGROUP_ID] = temp[last_offset];\r\n        temp[last_offset] = 0;\r\n    }\r\n\r\n    // Down-sweep phase\r\n    for (var d: u32 = 1; d < ITEMS_PER_WORKGROUP; d *= 2) {\r\n        offset >>= 1;\r\n        workgroupBarrier();\r\n\r\n        if (TID < d) {\r\n            var ai: u32 = offset * (ELM_TID + 1) - 1;\r\n            var bi: u32 = offset * (ELM_TID + 2) - 1;\r\n\r\n            let t: u32 = temp[ai];\r\n            temp[ai] = temp[bi];\r\n            temp[bi] += t;\r\n        }\r\n    }\r\n    workgroupBarrier();\r\n\r\n    // Copy result from shared memory to global memory\r\n    items[ELM_GID]     = temp[ELM_TID];\r\n    items[ELM_GID + 1] = temp[ELM_TID + 1];\r\n}\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn add_block_sums(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP;\r\n    let GID = WID + TID; // Global thread ID\r\n    \r\n\r\n    let ELM_ID = GID * 2;\r\n    let blockSum = blockSums[WORKGROUP_ID];\r\n\r\n    items[ELM_ID] += blockSum;\r\n    items[ELM_ID + 1] += blockSum;\r\n}`\r\n\r\nexport default prefixSumSource","const radixSortReorderSource = /* wgsl */ `\r\n\r\n@group(0) @binding(0) var<storage, read> inputKeys: array<u32>;\r\n@group(0) @binding(1) var<storage, read_write> outputKeys: array<u32>;\r\n@group(0) @binding(2) var<storage, read> local_prefix_sum: array<u32>;\r\n@group(0) @binding(3) var<storage, read> prefix_block_sum: array<u32>;\r\n@group(0) @binding(4) var<storage, read> inputValues: array<u32>;\r\n@group(0) @binding(5) var<storage, read_write> outputValues: array<u32>;\r\n\r\noverride WORKGROUP_COUNT: u32;\r\noverride THREADS_PER_WORKGROUP: u32;\r\noverride WORKGROUP_SIZE_X: u32;\r\noverride WORKGROUP_SIZE_Y: u32;\r\noverride CURRENT_BIT: u32;\r\noverride ELEMENT_COUNT: u32;\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn radix_sort_reorder(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) { \r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP;\r\n    let GID = WID + TID; // Global thread ID\r\n\r\n    if (GID >= ELEMENT_COUNT) {\r\n        return;\r\n    }\r\n\r\n    let k = inputKeys[GID];\r\n    let v = inputValues[GID];\r\n\r\n    let local_prefix = local_prefix_sum[GID];\r\n\r\n    // Calculate new position\r\n    let extract_bits = (k >> CURRENT_BIT) & 0x3;\r\n    let pid = extract_bits * WORKGROUP_COUNT + WORKGROUP_ID;\r\n    let sorted_position = prefix_block_sum[pid] + local_prefix;\r\n    \r\n    outputKeys[sorted_position] = k;\r\n    outputValues[sorted_position] = v;\r\n}`\r\n\r\nexport default radixSortReorderSource;","const checkSortSource = (isFirstPass = false, isLastPass = false, isFullCheck = false) => /* wgsl */ `\r\n\r\n@group(0) @binding(0) var<storage, read> input: array<u32>;\r\n@group(0) @binding(1) var<storage, read_write> output: array<u32>;\r\n@group(0) @binding(2) var<storage, read> original: array<u32>;\r\n@group(0) @binding(3) var<storage, read_write> is_sorted: u32;\r\n\r\noverride WORKGROUP_SIZE_X: u32;\r\noverride WORKGROUP_SIZE_Y: u32;\r\noverride THREADS_PER_WORKGROUP: u32;\r\noverride ELEMENT_COUNT: u32;\r\noverride START_ELEMENT: u32;\r\n\r\nvar<workgroup> s_data: array<u32, THREADS_PER_WORKGROUP>;\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn check_sort(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP + START_ELEMENT;\r\n    let GID = TID + WID; // Global thread ID\r\n\r\n    // Load data into shared memory\r\n    ${ isFirstPass ? first_pass_load_data : \"s_data[TID] = select(0u, input[GID], GID < ELEMENT_COUNT);\" }\r\n\r\n    // Perform parallel reduction\r\n    for (var d = 1u; d < THREADS_PER_WORKGROUP; d *= 2u) {      \r\n        workgroupBarrier();  \r\n        if (TID % (2u * d) == 0u) {\r\n            s_data[TID] += s_data[TID + d];\r\n        }\r\n    }\r\n    workgroupBarrier();\r\n\r\n    // Write reduction result\r\n    ${ isLastPass ? last_pass(isFullCheck) : write_reduction_result }\r\n}`\r\n\r\nconst write_reduction_result = /* wgsl */ `\r\n    if (TID == 0) {\r\n        output[WORKGROUP_ID] = s_data[0];\r\n    }\r\n`\r\n\r\nconst first_pass_load_data = /* wgsl */ `\r\n    let LAST_THREAD = min(THREADS_PER_WORKGROUP, ELEMENT_COUNT - WID) - 1;\r\n\r\n    // Load current element into shared memory\r\n    // Also load next element for comparison\r\n    let elm = select(0u, input[GID], GID < ELEMENT_COUNT);\r\n    let next = select(0u, input[GID + 1], GID < ELEMENT_COUNT-1);\r\n    s_data[TID] = elm;\r\n    workgroupBarrier();\r\n\r\n    s_data[TID] = select(0u, 1u, GID < ELEMENT_COUNT-1 && elm > next);\r\n`\r\n\r\nconst last_pass = (isFullCheck) => /* wgsl */ `\r\n    let fullDispatchLength = arrayLength(&output);\r\n    let dispatchIndex = TID * 3;\r\n\r\n    if (dispatchIndex >= fullDispatchLength) {\r\n        return;\r\n    }\r\n\r\n    ${isFullCheck ? last_pass_full : last_pass_fast}\r\n`\r\n\r\nconst last_pass_fast = /* wgsl */ `\r\n    output[dispatchIndex] = select(0, original[dispatchIndex], s_data[0] == 0 && is_sorted == 0u);\r\n`\r\n\r\nconst last_pass_full = /* wgsl */ `\r\n    if (TID == 0 && s_data[0] == 0) {\r\n        is_sorted = 1u;\r\n    }\r\n\r\n    output[dispatchIndex] = select(0, original[dispatchIndex], s_data[0] != 0);\r\n`\r\nexport default checkSortSource","import checkSortSource from \"./shaders/check_sort\"\r\nimport { find_optimal_dispatch_size } from \"./utils\"\r\n\r\nclass CheckSortKernel {\r\n    /**\r\n     * CheckSortKernel - Performs a parralel reduction to check if an array is sorted.\r\n     * \r\n     * @param {GPUDevice} device\r\n     * @param {GPUBuffer} data - The buffer containing the data to check\r\n     * @param {GPUBuffer} result - The result dispatch size buffer\r\n     * @param {GPUBuffer} original - The original dispatch size buffer\r\n     * @param {GPUBuffer} is_sorted - 1-element buffer to store whether the array is sorted\r\n     * @param {number} count - The number of elements to check\r\n     * @param {number} start - The index to start checking from\r\n     * @param {boolean} full_check - Whether this kernel is performing a full check or a fast check\r\n     * @param {object} workgroup_size - The workgroup size in x and y dimensions\r\n     */\r\n    constructor({\r\n        device,\r\n        data,\r\n        result,\r\n        original,\r\n        is_sorted,\r\n        count,\r\n        start = 0,\r\n        full_check = true,\r\n        workgroup_size = { x: 16, y: 16 },\r\n    }) {\r\n        this.device = device\r\n        this.count = count\r\n        this.start = start\r\n        this.full_check = full_check\r\n        this.workgroup_size = workgroup_size\r\n        this.threads_per_workgroup = workgroup_size.x * workgroup_size.y\r\n\r\n        this.pipelines = []\r\n\r\n        this.buffers = {\r\n            data, \r\n            result, \r\n            original, \r\n            is_sorted,\r\n            outputs: []\r\n        }\r\n\r\n        this.create_passes_recursive(data, count)\r\n    }\r\n\r\n    // Find the best dispatch size for each pass to minimize unused workgroups\r\n    static find_optimal_dispatch_chain(device, item_count, workgroup_size) {\r\n        const threads_per_workgroup = workgroup_size.x * workgroup_size.y\r\n        const sizes = []\r\n\r\n        do {\r\n            // Number of workgroups required to process all items\r\n            const target_workgroup_count = Math.ceil(item_count / threads_per_workgroup)\r\n    \r\n            // Optimal dispatch size and updated workgroup count\r\n            const dispatchSize = find_optimal_dispatch_size(device, target_workgroup_count)\r\n    \r\n            sizes.push(dispatchSize.x, dispatchSize.y, 1)\r\n            item_count = target_workgroup_count\r\n        } while (item_count > 1)\r\n    \r\n        return sizes\r\n    }\r\n\r\n    create_passes_recursive(buffer, count, passIndex = 0) {\r\n        const workgroup_count = Math.ceil(count / this.threads_per_workgroup)\r\n\r\n        const isFirstPass = passIndex === 0\r\n        const isLastPass = workgroup_count <= 1\r\n\r\n        const outputBuffer = isLastPass ? this.buffers.result : this.device.createBuffer({\r\n            label: `check-sort-${this.full_check ? 'full' : 'fast'}-${passIndex}`,\r\n            size: workgroup_count * 4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\r\n        })\r\n\r\n        const bindGroupLayout = this.device.createBindGroupLayout({\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'read-only-storage' }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                },\r\n                // Last pass bindings\r\n                ...(isLastPass ? [{\r\n                    binding: 2,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'read-only-storage' }\r\n                }, {\r\n                    binding: 3,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                }] : []),\r\n            ]\r\n        })\r\n\r\n        const bindGroup = this.device.createBindGroup({\r\n            layout: bindGroupLayout,\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: { buffer: buffer }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: { buffer: outputBuffer }\r\n                },\r\n                // Last pass buffers\r\n                ...(isLastPass ? [{\r\n                    binding: 2,\r\n                    resource: { buffer: this.buffers.original }\r\n                }, {\r\n                    binding: 3,\r\n                    resource: { buffer: this.buffers.is_sorted }\r\n                }] : []),\r\n            ]\r\n        })\r\n\r\n        const pipelineLayout = this.device.createPipelineLayout({\r\n            bindGroupLayouts: [bindGroupLayout]\r\n        })\r\n\r\n        const element_count = isFirstPass ? this.start + count : count\r\n        const start_element = isFirstPass ? this.start : 0\r\n\r\n        const checkSortPipeline = this.device.createComputePipeline({\r\n            layout: pipelineLayout,\r\n            compute: {\r\n                module: this.device.createShaderModule({\r\n                    code: checkSortSource(isFirstPass, isLastPass, this.full_check),\r\n                    label: 'check-sort',\r\n                }),\r\n                entryPoint: 'check_sort',\r\n                constants: {\r\n                    'WORKGROUP_SIZE_X': this.workgroup_size.x,\r\n                    'WORKGROUP_SIZE_Y': this.workgroup_size.y,\r\n                    'THREADS_PER_WORKGROUP': this.threads_per_workgroup,\r\n                    'ELEMENT_COUNT': element_count,\r\n                    'START_ELEMENT': start_element,\r\n                },\r\n            }\r\n        })\r\n\r\n        this.buffers.outputs.push(outputBuffer)\r\n        this.pipelines.push({ pipeline: checkSortPipeline, bindGroup })\r\n        \r\n        if (!isLastPass) {\r\n            this.create_passes_recursive(outputBuffer, workgroup_count, passIndex + 1)\r\n        }\r\n    }\r\n\r\n    dispatch(pass, dispatchSize, offset = 0) {\r\n        for (let i = 0; i < this.pipelines.length; i++) {\r\n            const { pipeline, bindGroup } = this.pipelines[i]\r\n\r\n            const dispatchIndirect = (this.full_check || i < this.pipelines.length - 1)\r\n\r\n            pass.setPipeline(pipeline)\r\n            pass.setBindGroup(0, bindGroup)\r\n\r\n            if (dispatchIndirect)\r\n                pass.dispatchWorkgroupsIndirect(dispatchSize, offset + i * 3 * 4)\r\n            else\r\n                // Only the last dispatch of the fast check kernel is constant to (1, 1, 1)\r\n                pass.dispatchWorkgroups(1, 1, 1)\r\n        }\r\n    }\r\n}\r\n\r\nexport default CheckSortKernel","import PrefixSumKernel from \"./PrefixSumKernel\"\r\nimport radixSortSource from \"./shaders/radix_sort\"\r\nimport radixSortSource_LocalShuffle from \"./shaders/optimizations/radix_sort_local_shuffle\"\r\nimport reorderSource from \"./shaders/radix_sort_reorder\"\r\nimport CheckSortKernel from \"./CheckSortKernel\"\r\nimport { create_buffer_from_data, find_optimal_dispatch_size } from \"./utils\"\r\n\r\nclass RadixSortKernel {\r\n    /**\r\n     * Perform a parallel radix sort on the GPU given a buffer of keys and (optionnaly) values\r\n     * Note: The buffers are sorted in-place.\r\n     * \r\n     * Based on \"Fast 4-way parallel radix sorting on GPUs\"\r\n     * https://www.sci.utah.edu/~csilva/papers/cgf.pdf]\r\n     * \r\n     * @param {GPUDevice} device\r\n     * @param {GPUBuffer} keys - Buffer containing the keys to sort\r\n     * @param {GPUBuffer} values - (optional) Buffer containing the associated values\r\n     * @param {number} count - Number of elements to sort\r\n     * @param {number} bit_count - Number of bits per element (default: 32)\r\n     * @param {object} workgroup_size - Workgroup size in x and y dimensions. (x * y) must be a power of two\r\n     * @param {boolean} check_order - Enable \"order checking\" optimization. Useful if the data needs to be sorted in real-time and doesn't change much. (default: false)\r\n     * @param {boolean} local_shuffle - Enable \"local shuffling\" optimization for the radix sort kernel (default: false)\r\n     * @param {boolean} avoid_bank_conflicts - Enable \"avoiding bank conflicts\" optimization for the prefix sum kernel (default: false)\r\n     */\r\n    constructor({\r\n        device,\r\n        keys,\r\n        values,\r\n        count,\r\n        bit_count = 32,\r\n        workgroup_size = { x: 16, y: 16 },\r\n        check_order = false,\r\n        local_shuffle = false,\r\n        avoid_bank_conflicts = false,\r\n    } = {}) {\r\n        if (device == null) throw new Error('No device provided')\r\n        if (keys == null) throw new Error('No keys buffer provided')\r\n        if (!Number.isInteger(count) || count <= 0) throw new Error('Invalid count parameter')\r\n        if (!Number.isInteger(bit_count) || bit_count <= 0 || bit_count > 32) throw new Error('Invalid bit_count parameter')\r\n        if (!Number.isInteger(workgroup_size.x) || !Number.isInteger(workgroup_size.y)) throw new Error('Invalid workgroup_size parameter')\r\n        if (bit_count % 4 != 0) throw new Error('bit_count must be a multiple of 4')\r\n\r\n        this.device = device\r\n        this.count = count\r\n        this.bit_count = bit_count\r\n        this.workgroup_size = workgroup_size\r\n        this.check_order = check_order\r\n        this.local_shuffle = local_shuffle\r\n        this.avoid_bank_conflicts = avoid_bank_conflicts\r\n\r\n        this.threads_per_workgroup = workgroup_size.x * workgroup_size.y\r\n        this.workgroup_count = Math.ceil(count / this.threads_per_workgroup)\r\n        this.prefix_block_workgroup_count = 4 * this.workgroup_count\r\n\r\n        this.has_values = (values != null) // Is the values buffer provided ?\r\n\r\n        this.dispatchSize = {}  // Dispatch dimension x and y\r\n        this.shaderModules = {} // GPUShaderModules\r\n        this.buffers = {}       // GPUBuffers\r\n        this.pipelines = []     // List of passes\r\n        this.kernels = {}\r\n\r\n        // Find best dispatch x and y dimensions to minimize unused threads\r\n        this.dispatchSize = find_optimal_dispatch_size(this.device, this.workgroup_count)\r\n\r\n        // Create shader modules from wgsl code\r\n        this.create_shader_modules()\r\n        \r\n        // Create multi-pass pipelines\r\n        this.create_pipelines(keys, values)\r\n    }\r\n\r\n    create_shader_modules() {\r\n        // Remove every occurence of \"values\" in the shader code if values buffer is not provided\r\n        const remove_values = (source) => {\r\n            return source.split('\\n')\r\n                         .filter(line => !line.toLowerCase().includes('values'))\r\n                         .join('\\n')\r\n        }\r\n\r\n        const blockSumSource = this.local_shuffle ? radixSortSource_LocalShuffle : radixSortSource\r\n        \r\n        this.shaderModules = {\r\n            blockSum: this.device.createShaderModule({\r\n                label: 'radix-sort-block-sum',\r\n                code: this.has_values ? blockSumSource : remove_values(blockSumSource),\r\n            }),\r\n            reorder: this.device.createShaderModule({\r\n                label: 'radix-sort-reorder',\r\n                code: this.has_values ? reorderSource : remove_values(reorderSource),\r\n            })\r\n        }\r\n    }\r\n\r\n    create_pipelines(keys, values) {    \r\n        // Block prefix sum kernel    \r\n        const { prefixSumKernel, prefixBlockSumBuffer } = this.create_prefix_sum_kernel()\r\n\r\n        // Indirect dispatch buffers\r\n        const dispatchData = this.calculate_dispatch_sizes(prefixSumKernel)\r\n\r\n        // GPU buffers\r\n        this.create_buffers(keys, values, prefixBlockSumBuffer, dispatchData)\r\n\r\n        // Check sort kernels\r\n        this.create_check_sort_kernels(this.buffers.keys, dispatchData)\r\n\r\n        // Radix sort passes for every 2 bits\r\n        for (let bit = 0; bit < this.bit_count; bit += 2) {\r\n            // Swap buffers every pass\r\n            const even      = (bit % 4 == 0)\r\n            const inKeys    = even ? this.buffers.keys : this.buffers.tmpKeys\r\n            const inValues  = even ? this.buffers.values : this.buffers.tmpValues\r\n            const outKeys   = even ? this.buffers.tmpKeys : this.buffers.keys\r\n            const outValues = even ? this.buffers.tmpValues : this.buffers.values\r\n\r\n            // Compute local prefix sums and block sums\r\n            const blockSumPipeline = this.create_block_sum_pipeline(inKeys, inValues, bit)\r\n            \r\n            // Reorder keys and values\r\n            const reorderPipeline = this.create_reorder_pipeline(inKeys, inValues, outKeys, outValues, bit)\r\n\r\n            this.pipelines.push({ blockSumPipeline, reorderPipeline })\r\n        }\r\n    }\r\n\r\n    create_prefix_sum_kernel() {\r\n        // Prefix Block Sum buffer (4 element per workgroup)\r\n        const prefixBlockSumBuffer = this.device.createBuffer({\r\n            label: 'radix-sort-prefix-block-sum',\r\n            size: this.prefix_block_workgroup_count * 4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\r\n        })\r\n\r\n        // Create block prefix sum kernel\r\n        const prefixSumKernel = new PrefixSumKernel({ \r\n            device: this.device,\r\n            data: prefixBlockSumBuffer, \r\n            count: this.prefix_block_workgroup_count,\r\n            workgroup_size: this.workgroup_size,\r\n            avoid_bank_conflicts: this.avoid_bank_conflicts,\r\n        })\r\n\r\n        this.kernels.prefixSum = prefixSumKernel\r\n\r\n        return { prefixSumKernel, prefixBlockSumBuffer }\r\n    }\r\n\r\n    calculate_dispatch_sizes(prefixSumKernel) {\r\n        // Prefix sum dispatch sizes\r\n        const prefixSumDispatchSize = prefixSumKernel.get_dispatch_chain()\r\n\r\n        // Check sort element count (fast/full)\r\n        const check_sort_fast_count = Math.min(this.count, this.threads_per_workgroup * 4)\r\n        const check_sort_full_count = this.count - check_sort_fast_count\r\n        const start_full = check_sort_fast_count - 1\r\n\r\n        // Check sort dispatch sizes\r\n        const dispatchSizesFast = CheckSortKernel.find_optimal_dispatch_chain(this.device, check_sort_fast_count, this.workgroup_size)\r\n        const dispatchSizesFull = CheckSortKernel.find_optimal_dispatch_chain(this.device, check_sort_full_count, this.workgroup_size)\r\n\r\n        // Initial dispatch sizes\r\n        const initialDispatch = [\r\n            this.dispatchSize.x, this.dispatchSize.y, 1, // Radix Sort + Reorder\r\n            ...dispatchSizesFast.slice(0, 3),            // Check sort fast\r\n            ...prefixSumDispatchSize                     // Prefix Sum\r\n        ]\r\n\r\n        // Dispatch offsets in main buffer\r\n        this.dispatchOffsets = {\r\n            radix_sort: 0,\r\n            check_sort_fast: 3 * 4,\r\n            prefix_sum: 6 * 4\r\n        }\r\n\r\n        return {\r\n            initialDispatch,\r\n            dispatchSizesFull,\r\n            check_sort_fast_count, \r\n            check_sort_full_count, \r\n            start_full \r\n        }\r\n    }\r\n\r\n    create_buffers(keys, values, prefixBlockSumBuffer, dispatchData) {\r\n        // Keys and values double buffering\r\n        const tmpKeysBuffer = this.device.createBuffer({\r\n            label: 'radix-sort-tmp-keys',\r\n            size: this.count * 4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\r\n        })\r\n        const tmpValuesBuffer = !this.has_values ? null : this.device.createBuffer({\r\n            label: 'radix-sort-tmp-values',\r\n            size: this.count * 4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\r\n        })\r\n\r\n        // Local Prefix Sum buffer (1 element per item)\r\n        const localPrefixSumBuffer = this.device.createBuffer({\r\n            label: 'radix-sort-local-prefix-sum',\r\n            size: this.count * 4,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\r\n        })\r\n\r\n        // Dispatch sizes (radix sort, check sort, prefix sum)\r\n        const dispatchBuffer = create_buffer_from_data({\r\n            device: this.device, \r\n            label: 'radix-sort-dispatch-size',\r\n            data: dispatchData.initialDispatch, \r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.INDIRECT\r\n        })\r\n        const originalDispatchBuffer = create_buffer_from_data({\r\n            device: this.device, \r\n            label: 'radix-sort-dispatch-size-original',\r\n            data: dispatchData.initialDispatch, \r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\r\n        })\r\n\r\n        // Dispatch sizes (full sort)\r\n        const checkSortFullDispatchBuffer = create_buffer_from_data({\r\n            label: 'check-sort-full-dispatch-size',\r\n            device: this.device, \r\n            data: dispatchData.dispatchSizesFull,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.INDIRECT\r\n        })\r\n        const checkSortFullOriginalDispatchBuffer = create_buffer_from_data({\r\n            label: 'check-sort-full-dispatch-size-original',\r\n            device: this.device, \r\n            data: dispatchData.dispatchSizesFull,\r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\r\n        })\r\n\r\n        // Flag to tell if the data is sorted\r\n        const isSortedBuffer = create_buffer_from_data({\r\n            label: 'is-sorted',\r\n            device: this.device, \r\n            data: new Uint32Array([0]), \r\n            usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\r\n        })\r\n        \r\n        this.buffers = {\r\n            keys: keys,\r\n            values: values,\r\n            tmpKeys: tmpKeysBuffer,\r\n            tmpValues: tmpValuesBuffer,\r\n            localPrefixSum: localPrefixSumBuffer,\r\n            prefixBlockSum: prefixBlockSumBuffer,\r\n            \r\n            dispatchSize: dispatchBuffer,\r\n            originalDispatchSize: originalDispatchBuffer,\r\n            checkSortFullDispatchSize: checkSortFullDispatchBuffer,\r\n            originalCheckSortFullDispatchSize: checkSortFullOriginalDispatchBuffer,\r\n            isSorted: isSortedBuffer,\r\n        }\r\n    }\r\n\r\n    create_check_sort_kernels(inKeys, checkSortPartitionData) {\r\n        // Skip check sort if disabled\r\n        if (!this.check_order) {\r\n            return [ null, null ]\r\n        }\r\n\r\n        const { check_sort_fast_count, check_sort_full_count, start_full } = checkSortPartitionData\r\n\r\n        // Create the full pass\r\n        const checkSortFull = new CheckSortKernel({\r\n            device: this.device,\r\n            data: inKeys,\r\n            result: this.buffers.dispatchSize,\r\n            original: this.buffers.originalDispatchSize,\r\n            is_sorted: this.buffers.isSorted,\r\n            count: check_sort_full_count,\r\n            start: start_full,\r\n            full_check: true,\r\n            workgroup_size: this.workgroup_size\r\n        })\r\n\r\n        // Create the fast pass\r\n        const checkSortFast = new CheckSortKernel({\r\n            device: this.device,\r\n            data: inKeys,\r\n            result: this.buffers.checkSortFullDispatchSize,\r\n            original: this.buffers.originalCheckSortFullDispatchSize,\r\n            is_sorted: this.buffers.isSorted,\r\n            count: check_sort_fast_count,\r\n            full_check: false,\r\n            workgroup_size: this.workgroup_size\r\n        })\r\n\r\n        if (checkSortFast.threads_per_workgroup < checkSortFull.pipelines.length) {\r\n            console.warn(`Warning: workgroup size is too small to enable check sort optimization, disabling...`)\r\n            this.check_order = false\r\n            return [ null, null ]\r\n        }\r\n\r\n        this.kernels.checkSortFast = checkSortFast\r\n        this.kernels.checkSortFull = checkSortFull\r\n    }\r\n\r\n    create_block_sum_pipeline(inKeys, inValues, bit) {\r\n        const bindGroupLayout = this.device.createBindGroupLayout({\r\n            label: 'radix-sort-block-sum',\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: this.local_shuffle ? 'storage' : 'read-only-storage' }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                },\r\n                ...(this.local_shuffle && this.has_values ? [{\r\n                    binding: 3,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                }] : [])\r\n            ]\r\n        })\r\n\r\n        const bindGroup = this.device.createBindGroup({\r\n            layout: bindGroupLayout,\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: { buffer: inKeys }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: { buffer: this.buffers.localPrefixSum }\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    resource: { buffer: this.buffers.prefixBlockSum }\r\n                },\r\n                // \"Local shuffle\" optimization needs access to the values buffer\r\n                ...(this.local_shuffle && this.has_values ? [{\r\n                    binding: 3,\r\n                    resource: { buffer: inValues }\r\n                }] : [])\r\n            ]\r\n        })\r\n\r\n        const pipelineLayout = this.device.createPipelineLayout({\r\n            bindGroupLayouts: [ bindGroupLayout ]\r\n        })\r\n\r\n        const blockSumPipeline = this.device.createComputePipeline({\r\n            label: 'radix-sort-block-sum',\r\n            layout: pipelineLayout,\r\n            compute: {\r\n                module: this.shaderModules.blockSum,\r\n                entryPoint: 'radix_sort',\r\n                constants: {\r\n                    'WORKGROUP_SIZE_X': this.workgroup_size.x,\r\n                    'WORKGROUP_SIZE_Y': this.workgroup_size.y,\r\n                    'WORKGROUP_COUNT': this.workgroup_count,\r\n                    'THREADS_PER_WORKGROUP': this.threads_per_workgroup,\r\n                    'ELEMENT_COUNT': this.count,\r\n                    'CURRENT_BIT': bit,\r\n                }\r\n            }\r\n        })\r\n\r\n        return {\r\n            pipeline: blockSumPipeline,\r\n            bindGroup\r\n        }\r\n    }\r\n\r\n    create_reorder_pipeline(inKeys, inValues, outKeys, outValues, bit) {\r\n        const bindGroupLayout = this.device.createBindGroupLayout({\r\n            label: 'radix-sort-reorder',\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'read-only-storage' }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'storage' }\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'read-only-storage' }\r\n                },\r\n                {\r\n                    binding: 3,\r\n                    visibility: GPUShaderStage.COMPUTE,\r\n                    buffer: { type: 'read-only-storage' }\r\n                },\r\n                ...(this.has_values ? [\r\n                    {\r\n                        binding: 4,\r\n                        visibility: GPUShaderStage.COMPUTE,\r\n                        buffer: { type: 'read-only-storage' }\r\n                    },\r\n                    {\r\n                        binding: 5,\r\n                        visibility: GPUShaderStage.COMPUTE,\r\n                        buffer: { type: 'storage' }\r\n                    }\r\n                ] : [])\r\n            ]\r\n        })\r\n\r\n        const bindGroup = this.device.createBindGroup({\r\n            layout: bindGroupLayout,\r\n            entries: [\r\n                {\r\n                    binding: 0,\r\n                    resource: { buffer: inKeys }\r\n                },\r\n                {\r\n                    binding: 1,\r\n                    resource: { buffer: outKeys }\r\n                },\r\n                {\r\n                    binding: 2,\r\n                    resource: { buffer: this.buffers.localPrefixSum }\r\n                },\r\n                {\r\n                    binding: 3,\r\n                    resource: { buffer: this.buffers.prefixBlockSum }\r\n                },\r\n                ...(this.has_values ? [\r\n                    {\r\n                        binding: 4,\r\n                        resource: { buffer: inValues }\r\n                    },\r\n                    {\r\n                        binding: 5,\r\n                        resource: { buffer: outValues }\r\n                    }\r\n                ] : [])\r\n            ]\r\n        })\r\n\r\n        const pipelineLayout = this.device.createPipelineLayout({\r\n            bindGroupLayouts: [ bindGroupLayout ]\r\n        })\r\n\r\n        const reorderPipeline = this.device.createComputePipeline({\r\n            label: 'radix-sort-reorder',\r\n            layout: pipelineLayout,\r\n            compute: {\r\n                module: this.shaderModules.reorder,\r\n                entryPoint: 'radix_sort_reorder',\r\n                constants: {\r\n                    'WORKGROUP_SIZE_X': this.workgroup_size.x,\r\n                    'WORKGROUP_SIZE_Y': this.workgroup_size.y,\r\n                    'WORKGROUP_COUNT': this.workgroup_count,\r\n                    'THREADS_PER_WORKGROUP': this.threads_per_workgroup,\r\n                    'ELEMENT_COUNT': this.count,\r\n                    'CURRENT_BIT': bit,\r\n                }\r\n            }\r\n        })\r\n\r\n        return {\r\n            pipeline: reorderPipeline,\r\n            bindGroup\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Encode all pipelines into the current pass\r\n     * \r\n     * @param {GPUComputePassEncoder} pass \r\n     */\r\n    dispatch(pass) {        \r\n        for (let i = 0; i < this.bit_count / 2; i++) {\r\n            const { blockSumPipeline, reorderPipeline } = this.pipelines[i]\r\n\r\n            if (this.check_order && i % 2 == 0) {\r\n                this.kernels.checkSortFast.dispatch(pass, this.buffers.dispatchSize, this.dispatchOffsets.check_sort_fast)\r\n                this.kernels.checkSortFull.dispatch(pass, this.buffers.checkSortFullDispatchSize)\r\n            }\r\n            \r\n            pass.setPipeline(blockSumPipeline.pipeline)\r\n            pass.setBindGroup(0, blockSumPipeline.bindGroup)\r\n            pass.dispatchWorkgroupsIndirect(this.buffers.dispatchSize, this.dispatchOffsets.radix_sort)\r\n\r\n            this.kernels.prefixSum.dispatch(pass, this.buffers.dispatchSize, this.dispatchOffsets.prefix_sum)\r\n\r\n            pass.setPipeline(reorderPipeline.pipeline)\r\n            pass.setBindGroup(0, reorderPipeline.bindGroup)\r\n            pass.dispatchWorkgroupsIndirect(this.buffers.dispatchSize, this.dispatchOffsets.radix_sort)\r\n        }\r\n    }\r\n}\r\n\r\nexport default RadixSortKernel","/**\r\n * Radix sort with \"local shuffle and coalesced mapping\" optimization\r\n * \r\n * (see Implementation section in README for details)\r\n */\r\nconst radixSortCoalescedSource = /* wgsl */ `\r\n\r\n@group(0) @binding(0) var<storage, read_write> input: array<u32>;\r\n@group(0) @binding(1) var<storage, read_write> local_prefix_sums: array<u32>;\r\n@group(0) @binding(2) var<storage, read_write> block_sums: array<u32>;\r\n@group(0) @binding(3) var<storage, read_write> values: array<u32>;\r\n\r\noverride WORKGROUP_COUNT: u32;\r\noverride THREADS_PER_WORKGROUP: u32;\r\noverride WORKGROUP_SIZE_X: u32;\r\noverride WORKGROUP_SIZE_Y: u32;\r\noverride CURRENT_BIT: u32;\r\noverride ELEMENT_COUNT: u32;\r\n\r\nvar<workgroup> s_prefix_sum: array<u32, 2 * (THREADS_PER_WORKGROUP + 1)>;\r\nvar<workgroup> s_prefix_sum_scan: array<u32, 4>;\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn radix_sort(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP;\r\n    let GID = WID + TID; // Global thread ID\r\n\r\n    // Extract 2 bits from the input\r\n    let elm = input[GID];\r\n    let val = values[GID];\r\n    let extract_bits: u32 = (elm >> CURRENT_BIT) & 0x3;\r\n\r\n    var bit_prefix_sums = array<u32, 4>(0, 0, 0, 0);\r\n\r\n    // If the workgroup is inactive, prevent block_sums buffer update\r\n    var LAST_THREAD: u32 = 0xffffffff; \r\n\r\n    if (WORKGROUP_ID < WORKGROUP_COUNT) {\r\n        // Otherwise store the index of the last active thread in the workgroup\r\n        LAST_THREAD = min(THREADS_PER_WORKGROUP, ELEMENT_COUNT - WID) - 1;\r\n    }\r\n\r\n    // Initialize parameters for double-buffering\r\n    let TPW = THREADS_PER_WORKGROUP + 1;\r\n    var swapOffset: u32 = 0;\r\n    var inOffset:  u32 = TID;\r\n    var outOffset: u32 = TID + TPW;\r\n\r\n    // 4-way prefix sum\r\n    for (var b: u32 = 0; b < 4; b++) {\r\n        // Initialize local prefix with bitmask\r\n        let bitmask = select(0u, 1u, extract_bits == b);\r\n        s_prefix_sum[inOffset + 1] = bitmask;\r\n        workgroupBarrier();\r\n\r\n        // Prefix sum\r\n        for (var offset: u32 = 1; offset < THREADS_PER_WORKGROUP; offset *= 2) {\r\n            if (TID >= offset) {\r\n                s_prefix_sum[outOffset] = s_prefix_sum[inOffset] + s_prefix_sum[inOffset - offset];\r\n            } else {\r\n                s_prefix_sum[outOffset] = s_prefix_sum[inOffset];\r\n            }\r\n\r\n            // Swap buffers\r\n            outOffset = inOffset;\r\n            swapOffset = TPW - swapOffset;\r\n            inOffset = TID + swapOffset;\r\n            \r\n            workgroupBarrier();\r\n        }\r\n\r\n        // Store prefix sum for current bit\r\n        let prefix_sum = s_prefix_sum[inOffset];\r\n        bit_prefix_sums[b] = prefix_sum;\r\n\r\n        if (TID == LAST_THREAD) {\r\n            // Store block sum to global memory\r\n            let total_sum: u32 = prefix_sum + bitmask;\r\n            block_sums[b * WORKGROUP_COUNT + WORKGROUP_ID] = total_sum;\r\n        }\r\n\r\n        // Swap buffers\r\n        outOffset = inOffset;\r\n        swapOffset = TPW - swapOffset;\r\n        inOffset = TID + swapOffset;\r\n    }\r\n\r\n    let prefix_sum = bit_prefix_sums[extract_bits];   \r\n\r\n    // Scan bit prefix sums\r\n    if (TID == LAST_THREAD) {\r\n        var sum: u32 = 0;\r\n        bit_prefix_sums[extract_bits] += 1;\r\n        for (var i: u32 = 0; i < 4; i++) {\r\n            s_prefix_sum_scan[i] = sum;\r\n            sum += bit_prefix_sums[i];\r\n        }\r\n    }\r\n    workgroupBarrier();\r\n\r\n    if (GID < ELEMENT_COUNT) {\r\n        // Compute new position\r\n        let new_pos: u32 = prefix_sum + s_prefix_sum_scan[extract_bits];\r\n\r\n        // Shuffle elements locally\r\n        input[WID + new_pos] = elm;\r\n        values[WID + new_pos] = val;\r\n        local_prefix_sums[WID + new_pos] = prefix_sum;\r\n    }\r\n}`\r\n\r\nexport default radixSortCoalescedSource;","const radixSortSource = /* wgsl */ `\r\n\r\n@group(0) @binding(0) var<storage, read> input: array<u32>;\r\n@group(0) @binding(1) var<storage, read_write> local_prefix_sums: array<u32>;\r\n@group(0) @binding(2) var<storage, read_write> block_sums: array<u32>;\r\n\r\noverride WORKGROUP_COUNT: u32;\r\noverride THREADS_PER_WORKGROUP: u32;\r\noverride WORKGROUP_SIZE_X: u32;\r\noverride WORKGROUP_SIZE_Y: u32;\r\noverride CURRENT_BIT: u32;\r\noverride ELEMENT_COUNT: u32;\r\n\r\nvar<workgroup> s_prefix_sum: array<u32, 2 * (THREADS_PER_WORKGROUP + 1)>;\r\n\r\n@compute @workgroup_size(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, 1)\r\nfn radix_sort(\r\n    @builtin(workgroup_id) w_id: vec3<u32>,\r\n    @builtin(num_workgroups) w_dim: vec3<u32>,\r\n    @builtin(local_invocation_index) TID: u32, // Local thread ID\r\n) {\r\n    let WORKGROUP_ID = w_id.x + w_id.y * w_dim.x;\r\n    let WID = WORKGROUP_ID * THREADS_PER_WORKGROUP;\r\n    let GID = WID + TID; // Global thread ID\r\n\r\n    // Extract 2 bits from the input\r\n    let elm = input[GID];\r\n    let extract_bits: u32 = (elm >> CURRENT_BIT) & 0x3;\r\n\r\n    var bit_prefix_sums = array<u32, 4>(0, 0, 0, 0);\r\n\r\n    // If the workgroup is inactive, prevent block_sums buffer update\r\n    var LAST_THREAD: u32 = 0xffffffff; \r\n\r\n    if (WORKGROUP_ID < WORKGROUP_COUNT) {\r\n        // Otherwise store the index of the last active thread in the workgroup\r\n        LAST_THREAD = min(THREADS_PER_WORKGROUP, ELEMENT_COUNT - WID) - 1;\r\n    }\r\n\r\n    // Initialize parameters for double-buffering\r\n    let TPW = THREADS_PER_WORKGROUP + 1;\r\n    var swapOffset: u32 = 0;\r\n    var inOffset:  u32 = TID;\r\n    var outOffset: u32 = TID + TPW;\r\n\r\n    // 4-way prefix sum\r\n    for (var b: u32 = 0; b < 4; b++) {\r\n        // Initialize local prefix with bitmask\r\n        let bitmask = select(0u, 1u, extract_bits == b);\r\n        s_prefix_sum[inOffset + 1] = bitmask;\r\n        workgroupBarrier();\r\n\r\n        // Prefix sum\r\n        for (var offset: u32 = 1; offset < THREADS_PER_WORKGROUP; offset *= 2) {\r\n            if (TID >= offset) {\r\n                s_prefix_sum[outOffset] = s_prefix_sum[inOffset] + s_prefix_sum[inOffset - offset];\r\n            } else {\r\n                s_prefix_sum[outOffset] = s_prefix_sum[inOffset];\r\n            }\r\n\r\n            // Swap buffers\r\n            outOffset = inOffset;\r\n            swapOffset = TPW - swapOffset;\r\n            inOffset = TID + swapOffset;\r\n            \r\n            workgroupBarrier();\r\n        }\r\n\r\n        // Store prefix sum for current bit\r\n        let prefix_sum = s_prefix_sum[inOffset];\r\n        bit_prefix_sums[b] = prefix_sum;\r\n\r\n        if (TID == LAST_THREAD) {\r\n            // Store block sum to global memory\r\n            let total_sum: u32 = prefix_sum + bitmask;\r\n            block_sums[b * WORKGROUP_COUNT + WORKGROUP_ID] = total_sum;\r\n        }\r\n\r\n        // Swap buffers\r\n        outOffset = inOffset;\r\n        swapOffset = TPW - swapOffset;\r\n        inOffset = TID + swapOffset;\r\n    }\r\n\r\n    // Store local prefix sum to global memory\r\n    local_prefix_sums[GID] = bit_prefix_sums[extract_bits];\r\n}`\r\n\r\nexport default radixSortSource;"],"names":["find_optimal_dispatch_size","device","workgroup_count","dispatchSize","x","y","limits","maxComputeWorkgroupsPerDimension","Math","floor","sqrt","ceil","create_buffer_from_data","_ref","label","data","_ref$usage","usage","dispatchSizes","createBuffer","size","length","mappedAtCreation","Uint32Array","getMappedRange","set","unmap","PrefixSumKernel","_createClass","count","_ref$workgroup_size","workgroup_size","_ref$avoid_bank_confl","avoid_bank_conflicts","_classCallCheck","this","threads_per_workgroup","items_per_workgroup","log2","Error","concat","pipelines","shaderModule","createShaderModule","code","create_pass_recursive","key","value","blockSumBuffer","GPUBufferUsage","STORAGE","COPY_SRC","COPY_DST","bindGroupLayout","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","buffer","type","bindGroup","createBindGroup","layout","resource","pipelineLayout","createPipelineLayout","bindGroupLayouts","scanPipeline","createComputePipeline","compute","module","entryPoint","constants","WORKGROUP_SIZE_X","WORKGROUP_SIZE_Y","THREADS_PER_WORKGROUP","ITEMS_PER_WORKGROUP","push","pipeline","blockSumPipeline","flatMap","p","pass","offset","arguments","undefined","i","_this$pipelines$i","setPipeline","setBindGroup","dispatchWorkgroupsIndirect","radixSortReorderSource","checkSortSource","isLastPass","isFullCheck","first_pass_load_data","last_pass","write_reduction_result","last_pass_full","last_pass_fast","CheckSortKernel","result","original","is_sorted","_ref$start","start","_ref$full_check","full_check","buffers","outputs","create_passes_recursive","passIndex","isFirstPass","outputBuffer","_toConsumableArray","element_count","start_element","checkSortPipeline","ELEMENT_COUNT","START_ELEMENT","dispatchIndirect","dispatchWorkgroups","item_count","sizes","target_workgroup_count","RadixSortKernel","keys","values","_ref$bit_count","bit_count","_ref$check_order","check_order","_ref$local_shuffle","local_shuffle","Number","isInteger","prefix_block_workgroup_count","has_values","shaderModules","kernels","create_shader_modules","create_pipelines","remove_values","source","split","filter","line","toLowerCase","includes","join","blockSumSource","blockSum","reorder","reorderSource","_this$create_prefix_s","create_prefix_sum_kernel","prefixSumKernel","prefixBlockSumBuffer","dispatchData","calculate_dispatch_sizes","create_buffers","create_check_sort_kernels","bit","even","inKeys","tmpKeys","inValues","tmpValues","outKeys","outValues","create_block_sum_pipeline","reorderPipeline","create_reorder_pipeline","prefixSum","prefixSumDispatchSize","get_dispatch_chain","check_sort_fast_count","min","check_sort_full_count","start_full","dispatchSizesFast","find_optimal_dispatch_chain","dispatchSizesFull","initialDispatch","slice","dispatchOffsets","radix_sort","check_sort_fast","prefix_sum","tmpKeysBuffer","tmpValuesBuffer","localPrefixSumBuffer","dispatchBuffer","INDIRECT","originalDispatchBuffer","checkSortFullDispatchBuffer","checkSortFullOriginalDispatchBuffer","isSortedBuffer","localPrefixSum","prefixBlockSum","originalDispatchSize","checkSortFullDispatchSize","originalCheckSortFullDispatchSize","isSorted","checkSortPartitionData","checkSortFull","checkSortFast","console","warn","WORKGROUP_COUNT","CURRENT_BIT","dispatch"],"mappings":"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"}